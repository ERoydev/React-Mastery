{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming Stuff\\\\ReactJS Mastery\\\\Redux - Crash Course\\\\01-starting-project (1)\\\\01-starting-project\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport { useSelector, useDispatch } from 'react-redux';\nimport { counterActions } from '../store';\nimport classes from './Counter.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  const dispatch = useDispatch();\n  // Dispatch an action against my redux Store\n\n  const show = useSelector(state => state.counter.showCounter); //* i can use this multiple time to retrieve different pieces of data from the state\n\n  const counter = useSelector(state => state.counter); //* i just get tiny slice from the store\n  // With useSelector React Redux automatically set up a subscription to the store for this component\n  // My component will be UPDATED and will recieve the latest counter automatically whenever that data changes in redux store\n\n  // Change to redux store will make my component to re-mount to update changed data\n  // If this component was removed from the DOM React Redux will clear this subscription\n\n  console.log(show.counter.showCounter);\n  const incrementHandler = () => {\n    // Po tozi nachin podavam action-a vmesto da pisha ({type: 'increment'}) izpolzvam imeto na metoda direktno\n    dispatch(counterActions.increment());\n  };\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  };\n  const increaseHandler = () => {\n    // i attach payload to the action\n    // dispatch({ type: 'increase', amount: 5})\n    dispatch(counterActions.increase(5));\n  };\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"Kj62B+TF+t0UI9DWNOMtMZhD6GU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Counter;\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["useSelector","useDispatch","counterActions","classes","jsxDEV","_jsxDEV","Counter","_s","dispatch","show","state","counter","showCounter","console","log","incrementHandler","increment","decrementHandler","decrement","increaseHandler","increase","toggleCounterHandler","toggleCounter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Programming Stuff/ReactJS Mastery/Redux - Crash Course/01-starting-project (1)/01-starting-project/src/components/Counter.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\n\nimport { counterActions } from '../store';\nimport classes from './Counter.module.css';\n\nconst Counter = () => {\n  const dispatch = useDispatch(); \n  // Dispatch an action against my redux Store\n\n  const show = useSelector(state => state.counter.showCounter); //* i can use this multiple time to retrieve different pieces of data from the state\n\n  const counter = useSelector(state => state.counter); //* i just get tiny slice from the store\n  // With useSelector React Redux automatically set up a subscription to the store for this component\n  // My component will be UPDATED and will recieve the latest counter automatically whenever that data changes in redux store\n  \n  // Change to redux store will make my component to re-mount to update changed data\n  // If this component was removed from the DOM React Redux will clear this subscription\n\n  console.log(show.counter.showCounter)\n  const incrementHandler = () => {\n    // Po tozi nachin podavam action-a vmesto da pisha ({type: 'increment'}) izpolzvam imeto na metoda direktno\n    dispatch(counterActions.increment());\n  };\n\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  };\n\n  const increaseHandler = () => {\n    // i attach payload to the action\n    // dispatch({ type: 'increase', amount: 5})\n    dispatch(counterActions.increase(5))\n  }\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter())\n  };\n  \n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {/* Tipical conditional rendering */}\n      {/* {show && <div className={classes.value}>{counter}</div> } */}\n\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 5</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\n\nexport default Counter;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,cAAc,QAAQ,UAAU;AACzC,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B;;EAEA,MAAMQ,IAAI,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;;EAE9D,MAAMD,OAAO,GAAGX,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;EACrD;EACA;;EAEA;EACA;;EAEAE,OAAO,CAACC,GAAG,CAACL,IAAI,CAACE,OAAO,CAACC,WAAW,CAAC;EACrC,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACAP,QAAQ,CAACN,cAAc,CAACc,SAAS,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BT,QAAQ,CAACN,cAAc,CAACgB,SAAS,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACAX,QAAQ,CAACN,cAAc,CAACkB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjCb,QAAQ,CAACN,cAAc,CAACoB,aAAa,CAAC,CAAC,CAAC;EAC1C,CAAC;EAED,oBACEjB,OAAA;IAAMkB,SAAS,EAAEpB,OAAO,CAACQ,OAAQ;IAAAa,QAAA,gBAC/BnB,OAAA;MAAAmB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAItBvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAQwB,OAAO,EAAEd,gBAAiB;QAAAS,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDvB,OAAA;QAAQwB,OAAO,EAAEV,eAAgB;QAAAK,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxDvB,OAAA;QAAQwB,OAAO,EAAEZ,gBAAiB;QAAAO,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACNvB,OAAA;MAAQwB,OAAO,EAAER,oBAAqB;MAAAG,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEX,CAAC;AAACrB,EAAA,CA/CID,OAAO;EAAA,QACML,WAAW,EAGfD,WAAW,EAERA,WAAW;AAAA;AAAA8B,EAAA,GANvBxB,OAAO;AAkDb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}