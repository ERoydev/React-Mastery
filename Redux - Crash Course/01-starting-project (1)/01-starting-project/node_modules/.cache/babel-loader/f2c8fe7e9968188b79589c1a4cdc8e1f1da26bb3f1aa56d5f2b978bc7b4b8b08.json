{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    register(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// Prepare a slice of our global state\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      // Here i am allowed to mutate the state\n      // the toolkit will take care so in reality i dont mutate the state again\n      // redux use imgur => automatically clone existing state, create a new state object and overwrite the state that im editing in immutable way\n      state.counter += 1;\n    },\n    decrement(state) {\n      state.counter -= 1;\n    },\n    increase(state, action) {\n      state.counter += action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         // I return new object with the state not merging ONLY OVERWRITE the existing state.\n//         // state.counter += 1 NOT ALLOWED TO MUTATE LIKE THAT\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     };\n\n//     if (action.type === 'increase') {\n//         return {\n//             // i attach payload to the action\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     };\n\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: 0\n//         };\n//     };\n\n//     return state;\n// };\n// const store = createStore(counterReducer);\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\n\n// Object that have reducer methods and its names\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","register","logout","counterSlice","increment","decrement","increase","action","payload","toggleCounter","store","reducer","auth","counterActions","actions"],"sources":["D:/Programming Stuff/ReactJS Mastery/Redux - Crash Course/01-starting-project (1)/01-starting-project/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialCounterState = {\r\n    counter: 0,\r\n    showCounter: true\r\n}\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false,\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state) {\r\n            state.isAuthenticated = true;\r\n        },\r\n        register(state) {\r\n            state.isAuthenticated = true;\r\n        },\r\n        logout(state) {\r\n            state.isAuthenticated = false;\r\n        },\r\n    }\r\n})\r\n\r\n// Prepare a slice of our global state\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            // Here i am allowed to mutate the state\r\n            // the toolkit will take care so in reality i dont mutate the state again\r\n            // redux use imgur => automatically clone existing state, create a new state object and overwrite the state that im editing in immutable way\r\n            state.counter += 1;\r\n        },\r\n        decrement(state) {\r\n            state.counter -= 1;\r\n        },\r\n        increase(state, action) {\r\n            state.counter += action.payload;\r\n        },\r\n        toggleCounter(state) {\r\n            state.showCounter = !state.showCounter\r\n        }\r\n    }\r\n});\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//     if (action.type === 'increment') {\r\n//         // I return new object with the state not merging ONLY OVERWRITE the existing state.\r\n//         // state.counter += 1 NOT ALLOWED TO MUTATE LIKE THAT\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     };\r\n\r\n//     if (action.type === 'increase') {\r\n//         return {\r\n//             // i attach payload to the action\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n\r\n//     if (action.type === 'decrement') {\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     };\r\n\r\n//     if (action.type === 'toggle') {\r\n//         return {\r\n//             showCounter: !state.showCounter,\r\n//             counter: 0\r\n//         };\r\n//     };\r\n\r\n//     return state;\r\n// };\r\n// const store = createStore(counterReducer);\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        counter: counterSlice.reducer,\r\n        auth: authSlice.reducer,\r\n    }\r\n})\r\n\r\n// Object that have reducer methods and its names\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAG9D,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC1BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACNC,KAAKA,CAACC,KAAK,EAAE;MACTA,KAAK,CAACN,eAAe,GAAG,IAAI;IAChC,CAAC;IACDO,QAAQA,CAACD,KAAK,EAAE;MACZA,KAAK,CAACN,eAAe,GAAG,IAAI;IAChC,CAAC;IACDQ,MAAMA,CAACF,KAAK,EAAE;MACVA,KAAK,CAACN,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMS,YAAY,GAAGf,WAAW,CAAC;EAC7BQ,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEP,mBAAmB;EACjCQ,QAAQ,EAAE;IACNM,SAASA,CAACJ,KAAK,EAAE;MACb;MACA;MACA;MACAA,KAAK,CAACT,OAAO,IAAI,CAAC;IACtB,CAAC;IACDc,SAASA,CAACL,KAAK,EAAE;MACbA,KAAK,CAACT,OAAO,IAAI,CAAC;IACtB,CAAC;IACDe,QAAQA,CAACN,KAAK,EAAEO,MAAM,EAAE;MACpBP,KAAK,CAACT,OAAO,IAAIgB,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,aAAaA,CAACT,KAAK,EAAE;MACjBA,KAAK,CAACR,WAAW,GAAG,CAACQ,KAAK,CAACR,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA,MAAMkB,KAAK,GAAGrB,cAAc,CAAC;EACzBsB,OAAO,EAAE;IACLpB,OAAO,EAAEY,YAAY,CAACQ,OAAO;IAC7BC,IAAI,EAAEjB,SAAS,CAACgB;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,cAAc,GAAGV,YAAY,CAACW,OAAO;AAElD,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}